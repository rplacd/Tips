{ FileM.p }{ Created 12/21/23 2:51 AM by AppMaker }UNIT FileM;INTERFACE	USES		TipResources, Globals, ResourceDefs, TipsAppMakerPrototypeData, Dispatcher, Miscellany;{----------}	PROCEDURE InitFileM;	FUNCTION OkToOpen (fType: OSType): boolean;	PROCEDURE OpenDoc (fileName: Str255; vRefNum: integer);	PROCEDURE OpenApp;	PROCEDURE DoClose;	PROCEDURE DoQuit;	PROCEDURE DoFile (itemNr: integer);{----------}IMPLEMENTATION	CONST		dialogTop = 75;		dialogLeft = 85;	VAR		numOpenTypes: integer;		openTypeList: SFTypeList;{----------}	PROCEDURE InitFileM;	BEGIN		numOpenTypes := 1;		openTypeList[0] := kFileType;	END; {InitFileM}{----------}	FUNCTION OkToOpen (fType: OSType): boolean;		VAR			i: integer;			status: (searching, found, notFound);	BEGIN		i := 0;		status := searching;		WHILE status = searching DO			BEGIN				IF i >= numOpenTypes THEN					BEGIN						status := notFound;					END				ELSE					BEGIN						IF fType = openTypeList[i] THEN							BEGIN								status := found;							END						ELSE							BEGIN								i := i + 1;							END;					END;			END; {while}		OkToOpen := (status = found);	END; {OkToOpen}{----------}	PROCEDURE DoNew;	BEGIN		OpenWindows('', 0, 0);		InitAppData;	END; {DoNew}{----------}	PROCEDURE OpenDoc (fileName: Str255; vRefNum: integer);		CONST			StationeryFlag = $0800;	{This *should* be defined in an Apple interface file}		VAR			isStationery: boolean;			finderInfo: FInfo;			fRefNum: integer;	BEGIN		isStationery := false;		IF GetFInfo(fileName, vRefNum, finderInfo) = noErr THEN			BEGIN				IF BAnd(finderInfo.fdFlags, StationeryFlag) <> 0 THEN					BEGIN						isStationery := true;					END;			END;		IF OpenAppFile(vRefNum, fileName, fRefNum) THEN			BEGIN				IF isStationery THEN					BEGIN						OpenWindows('', 0, 0);						ReadAppFile(fRefNum);						CloseAppFile(fRefNum);					END				ELSE					BEGIN						OpenWindows(fileName, vRefNum, fRefNum);						ReadAppFile(fRefNum);					END;			END;	END; {OpenDoc}{----------}	PROCEDURE DoOpen;		VAR			dialogOrigin: Point;			sfInfo: SFReply;	BEGIN		SetPt(dialogOrigin, dialogLeft, dialogTop);		SFGetFile(dialogOrigin, '', NIL, numOpenTypes, openTypeList, NIL, sfInfo);		WITH sfInfo DO			BEGIN				IF good THEN					BEGIN						OpenDoc(fName, vRefNum);					END;			END;	END; {DoOpen}{----------}	PROCEDURE OpenApp;	BEGIN		DoNew;	END; {OpenApp}{----------}	PROCEDURE DoSaveAs;		VAR			sfInfo: SFReply;			fRefNum: integer;			ok: boolean;			prompt: StringHandle;			promptStr: Str255;			suggestion: Str255;	BEGIN		prompt := GetString(SaveAsPromptID);		IF prompt <> NIL THEN			BEGIN				promptStr := prompt^^;			END		ELSE			BEGIN				promptStr := '';			END;		suggestion := cur^.filename^^;		WITH sfInfo DO			BEGIN				IF CreateFile(sfInfo, promptStr, suggestion, kSignature, kFileType) THEN					BEGIN						CloseAppFile(cur^.fileNum);						IF OpenAppFile(vRefNum, fName, fRefNum) THEN							BEGIN								SetWTitle(curWindow, fName);								cur^.fileNum := fRefNum;								cur^.volNum := vRefNum;								SetString(cur^.filename, fName);								WriteAppFile(cur^.fileNum);								cur^.dirty := false;							END						ELSE							BEGIN {should never happen}								SetWTitle(curWindow, '???');								cur^.fileNum := 0;								cur^.volNum := 0;							END;					END;			END; {with}	END; {DoSaveAs}{----------}	PROCEDURE DoSave;	BEGIN		IF cur^.fileNum = 0 THEN			BEGIN				DoSaveAs;			END		ELSE			BEGIN				WriteAppFile(cur^.fileNum);				cur^.dirty := false;			END;	END; {DoSave}{----------}	PROCEDURE CloseAppWindow;		CONST			saveItem = 1;			cancelItem = 2;			discardItem = 3;		VAR			curTitle: Str255;			itemNum: integer;			ok: boolean;	BEGIN		ok := true;		SetInfo(FrontWindow);		IF cur^.dirty THEN			BEGIN				GetWTitle(curWindow, curTitle);				ParamText(curTitle, '', '', '');				InitCursor;				itemNum := Alert(SaveID, NIL);				CASE itemNum OF					saveItem: 						BEGIN							DoSave;							ok := NOT errorFlag;						END;					discardItem: 						;				   {Do nothing}					cancelItem: 						BEGIN							errorFlag := true;							ok := false;						END;				END; {case}			END;		IF ok THEN			BEGIN				DisposeAppData;				IF ord(cur^.windowKind) = 1 THEN					BEGIN {1st or only window in set}						CloseAppFile(cur^.fileNum);					END;				CloseCurWindow;			END;	END; {CloseAppWindow}{----------}	PROCEDURE DoClose;		VAR			frontPeek: WindowPeek;	BEGIN		errorFlag := false;		frontPeek := WindowPeek(FrontWindow);		IF frontPeek^.windowKind < 0 THEN			BEGIN				CloseDeskAcc(frontPeek^.windowKind);			END		ELSE IF frontPeek^.windowKind = dialogKind THEN			BEGIN				CloseModelessDialog(FrontWindow);			END		ELSE			BEGIN				CloseAppWindow;			END;	END; {DoClose}{----------}	PROCEDURE DoQuit;		VAR			quitting: boolean;	BEGIN		quitting := true;		WHILE quitting AND (FrontWindow <> NIL) DO			BEGIN				SystemTask;				DoClose;				IF errorFlag THEN					BEGIN						quitting := false;					END;			END; {while}		IF quitting THEN			BEGIN				quittingTime := true;			END;	END; {DoQuit}{----------}	PROCEDURE DoFile (itemNr: integer);	BEGIN		errorFlag := false;		CASE itemNr OF			0: 				;			FileReinitializeTips: 				BEGIN					DoReinitializeTips;					DoQuit;				END;			FileQuit: 				DoQuit;		END; {case}	END; {DoFile}END. {FileM}