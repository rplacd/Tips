{ Globals.p }{ Created 12/21/23 2:51 AM by AppMaker }UNIT Globals;INTERFACE	TYPE		WinInfoRec = RECORD	  {Standard fields:}				text: TEHandle;				vScroll: ControlHandle;				hScroll: ControlHandle;				fileNum: integer;				volNum: integer;				dirty: boolean;				filename: StringHandle;				windowKind: (noWindow, WWelcome, fillerWK);				witlHandle: Handle;		{Window itemlist resource}				wictHandle: Handle;		{Window item color table resource}	  {Application-specific fields:}	  {for Welcome:}				Button2Handle: ControlHandle;				CloseHandle: ControlHandle;			END; {WinInfoRec}		WinInfoPtr = ^WinInfoRec;	TYPE		SysConfigRec = RECORD				hasGestalt: boolean;				hasWNE: boolean;				hasColorQD: boolean;				hasAppleEvents: boolean;				hasEditionMgr: boolean;			END;	VAR		quittingTime: boolean;		curEvent: EventRecord;		curWindow: WindowPtr;		cur: WinInfoPtr;		inBackground: boolean;		sysConfig: SysConfigRec;{your application-specific variables:}{{ Bogus resource IDs that AppMaker's}{{ boilerplate assumes exists, but}{{ aren't used (and therefore don't}{{ exist in autogenerated code) }	CONST		IOErrorID = -MaxInt;		SaveID = -MaxInt;		CantPrintID = -MaxInt;		WrongTypeID = -MaxInt;{----------}	PROCEDURE InitGlobals;	PROCEDURE SetInfo (window: WindowPtr);	PROCEDURE SetNewInfo (window: WindowPtr);	PROCEDURE DiscardInfo (window: WindowPtr);{----------}IMPLEMENTATION	VAR		noCur: WinInfoRec;{----------}	PROCEDURE InitGlobals;	BEGIN		curWindow := NIL;		WITH noCur DO			BEGIN				text := NIL;				vScroll := NIL;				hScroll := NIL;				fileNum := 0;				volNum := 0;				dirty := false;				windowKind := noWindow;			END; {with}		cur := @noCur;	END; {InitGlobals}{----------}	PROCEDURE SetInfo (window: WindowPtr);		VAR			infoPtr: WinInfoPtr;	BEGIN		IF window <> curWindow THEN			BEGIN				curWindow := window;				IF curWindow <> NIL THEN					BEGIN						infoPtr := WinInfoPtr(GetWRefCon(curWindow));						cur := infoPtr;					END				ELSE					BEGIN						cur := @noCur;					END;			END;	END; {SetInfo}{----------}	PROCEDURE SetNewInfo (window: WindowPtr);		VAR			infoPtr: WinInfoPtr;	BEGIN		infoPtr := WinInfoPtr(NewPtr(sizeof(WinInfoRec)));		SetWRefCon(window, longint(infoPtr));		SetInfo(window);	END; {SetNewInfo}{----------}	PROCEDURE DiscardInfo (window: WindowPtr);		VAR			infoPtr: WinInfoPtr;	BEGIN		IF window = curWindow THEN			BEGIN				SetInfo(NIL);			END;		infoPtr := WinInfoPtr(GetWRefCon(window));		DisposPtr(Ptr(infoPtr));		HideWindow(window);		DisposeWindow(window);	END; {DiscardInfo}END. {Globals}