{ Welcome.p }{ Created 12/21/23 2:51 AM by AppMaker }UNIT Welcome;INTERFACE	USES		TipResources, GestaltUtilities, Globals, ResourceDefs, Miscellany, Scrolling, WindowAids, TipsAppMakerPrototypeData;{----------}	PROCEDURE OpenWelcome (fName: Str255; vRefNum: integer; fRefNum: integer);	PROCEDURE CloseWelcome;	PROCEDURE ControlWelcome (whichControl: ControlHandle; whichPart: integer; where: Point);	PROCEDURE MouseInWelcome (where: Point; modifiers: integer);	PROCEDURE TypeInWelcome (ch: char);	PROCEDURE UpdateWelcome;	PROCEDURE ActivateWelcome (activate: boolean);	PROCEDURE ResizeWelcome;	PROCEDURE ScrollWelcome (newValue: integer; oldValue: integer);{----------}IMPLEMENTATION	CONST		filler = 0;{ NC: Button2 is our ">" button that selects the next tip }		Button2 = 1;		Icon3 = 2;		DidYouKnowLabel = 3;		SysVerLabel = 4;		MakeLongMultidiskInstallaLabel = 5;		CloseButton = 6;{ NC: Our own window state follows here }{ 'TipLabel' is the label that will display our tip text! }	CONST		TipLabel = MakeLongMultidiskInstallaLabel;	VAR{ The "Welcome to System X" string }		WelcomeToSystemX: Str255;{ What tip resource is currently being shown? }		CurrentTip: TipResourceHnd;		CurrentResIdx: Integer;		RunID: Integer; { Random integer that is unique to this run;}	{ this lets us tell whether a tip's been viewed this round already. }{ ---------}	PROCEDURE RandomlySetCurrTip;		VAR			resIdx: Integer;			resHnd: TipResourceHnd;			resTried: Integer;	BEGIN	{ PRECONDITION: CurrentTip is either nil, or a locked handle. }		IF CurrentTip <> NIL THEN			ReleaseResource(Handle(CurrentTip));	{ Our method for selecting the current tip to display}	{ is as follows. }{ Try 3 times to do the following: }		FOR resTried := 3 DOWNTO 1 DO			BEGIN{ Select a random resource. }				resIdx := (Abs(Random) MOD CountResources('tips')) + 1;				resHnd := TipResourceHnd(GetIndResource('tips', resIdx));{ Make sure we haven't inadvertently selected our current tip.}{ If so, select the next consecutive tip. }				IF resIdx = CurrentResIdx THEN					resIdx := ((resIdx + 1) MOD CountResources('tips')) + 1;{ If its' lastRun is not our current RunID, update its run ID,}{ and go ahead and display it. }				IF RunID <> resHnd^^.lastRun THEN					BEGIN						CurrentResIdx := resIdx;						resHnd^^.lastRun := RunID;						CurrentTip := resHnd;						ChangedResource(Handle(resHnd));						Exit(RandomlySetCurrTip);					END;{ Otherwise, release the resource handle and try again. }				ReleaseResource(Handle(resHnd));			END;{ Otherwise, if we've failed 3 times to find a random resource }{ that we already haven't viewed this app run, simply give up }{ and display the last tip resource we found. Update its RunID. }		CurrentResIdx := resIdx;		resHnd := TipResourceHnd(GetIndResource('tips', resIdx));		resHnd^^.lastRun := RunID;		ChangedResource(Handle(resHnd));		CurrentTip := resHnd;{ POSTCONDITION: CurrentTip is a locked handle. }	END;{----------}	PROCEDURE DoButton2;	BEGIN		WITH cur^ DO			BEGIN				RandomlySetCurrTip;				UpdateWelcome;			END; {with}	END; {DoButton2}{----------}	PROCEDURE DoCloseButton;	BEGIN		WITH cur^ DO			BEGIN			END; {with}	{ NC: tell the main loop to quit the app }		quittingTime := TRUE;	END; {DoCloseButton}{----------}	PROCEDURE OpenWelcome (fName: Str255; vRefNum: integer; fRefNum: integer);		VAR			newWindow: WindowPtr;			bounds: Rect;			sysVer: LongInt;	BEGIN		newWindow := GetWindow(WelcomeID);		IF fName <> '' THEN			BEGIN				SetWTitle(newWindow, fName);			END;		SetPort(newWindow);		SetNewInfo(newWindow);		WITH cur^ DO			BEGIN				vScroll := NIL;				hScroll := NIL;				fileNum := fRefNum;				volNum := vRefNum;				dirty := false;				filename := NewString(fName);				windowKind := WWelcome;				WindowPeek(curWindow)^.windowKind := userKind + ord(WWelcome);				witlHandle := GetResource('Witl', WelcomeID);				wictHandle := GetResource('Wict', WelcomeID);				Button2Handle := GetNewControl(130, newWindow);				CloseHandle := GetNewControl(131, newWindow);				text := NIL;			END; {with}{ NC: Begin application state initialization here }		WelcomeToSystemX := GetSysVerString;{ ...set up state re: randomly selected current tip }		GetDateTime(randSeed);		runID := Random;		RandomlySetCurrTip;{ NC: End application state initialization here }		ShowWindow(newWindow);	END; {OpenWelcome}{----------}	PROCEDURE CloseWelcome;	BEGIN		WITH cur^ DO			BEGIN				DisposHandle(Handle(filename));			END; {with}		DiscardInfo(curWindow);	{ NC: signal that the app should close }		quittingTime := TRUE;	END; {CloseWelcome}{----------}	PROCEDURE ControlWelcome (whichControl: ControlHandle; whichPart: integer; where: Point);		VAR			bounds: Rect;	BEGIN		WITH cur^ DO			BEGIN				IF whichControl = Button2Handle THEN					BEGIN						IF TrackButton(Button2Handle, where) THEN							BEGIN								DoButton2;							END;					END;				IF whichControl = CloseHandle THEN					BEGIN						IF TrackButton(CloseHandle, where) THEN							BEGIN								DoCloseButton;							END;					END;			END; {with}	END; {ControlWelcome}{----------}	PROCEDURE MouseInWelcome (where: Point; modifiers: integer);		VAR			bounds: Rect;	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {MouseInWelcome}{----------}	PROCEDURE TypeInWelcome (ch: char);	BEGIN		WITH cur^ DO			BEGIN				IF text = NIL THEN					BEGIN						SysBeep(1);					END				ELSE					BEGIN						TEKey(ch, text);						dirty := true;					END;			END; {with}	END; {TypeInWelcome}{----------}	PROCEDURE DebugDisplayWindows;	BEGIN	END;{----------}	PROCEDURE UpdateWelcome;		VAR			bounds: Rect;			sysVerStrLen: Integer;			sysVerStrPtr: Ptr;			tipStrLen: Integer;			tipStrPtr: Ptr;	BEGIN		WITH cur^ DO			BEGIN				PlotIconID(1, GetWRect(Icon3));				SetWFont(DidYouKnowLabel);				TextIDBox(128, GetWRect(DidYouKnowLabel));				SetWFont(SysVerLabel);{ Display the current system version. }{ the code here was ... TextIDBox(129, GetWRect(SysVerLabel)) }				sysVerStrLen := Length(WelcomeToSystemX);				sysVerStrPtr := Ptr(Ord(@WelcomeToSystemX) + 1);				TextBox(sysVerStrPtr, sysVerStrLen, GetWRect(SysVerLabel), textJust);				SetWFont(TipLabel);{ Display the curent tip string. }{ the code here was ... TextIDBox ( 130 , GetWRect ( TipLabel ) ); }				tipStrLen := Length(CurrentTip^^.contents);				tipStrPtr := Ptr(Ord(@CurrentTip^^.contents) + 1);				TextBox(tipStrPtr, tipStrLen, GetWRect(TipLabel), textJust);			END; {with}	END; {UpdateWelcome}{----------}	PROCEDURE ActivateWelcome (activate: boolean);	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {ActivateWelcome}{----------}	PROCEDURE ResizeWelcome;	BEGIN	{ application-specific code to resize items in window }		WITH cur^ DO			BEGIN			END; {with}	END; {ResizeWelcome}{----------}	PROCEDURE ScrollWelcome (newValue: integer; oldValue: integer);	BEGIN	{ application-specific code to scroll window }	END; {ScrollWelcome}END. {Welcome}