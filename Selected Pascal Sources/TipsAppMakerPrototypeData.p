{ TipsAppMakerPrototypeData.p -- application-specific data management }{ Created 12/21/23 2:51 AM by AppMaker }{ This module contains data structures to access the data in your }{ document's file(s). The purpose is to isolate the details of the }{ data representation into this module and to provide accessor }{ functions for reading/writing logical pieces of the data. }{ For your application, you will probably rewrite most of this. }{ This module will not be regenerated by AppMaker unless you delete it. }UNIT TipsAppMakerPrototypeData;INTERFACE	USES		Globals, Miscellany;{ Define the creator type and file type for your application.}	CONST		kSignature = 'XXXX';		kFileType = 'TEXT';{ Define any appropriate data structures for your application.}{ Add any needed fields to Global's WinInfoRec so that each window}{ can have its own set of data. Your functions will use "cur^"}{ to access the data. Here, in the interface section, you should}{ define only those types which are intended to be visible to}{ modules outside this one. Later, in the implementation section,}{ you can define additional "private" data structures.}	TYPE		YourStuff = RECORD				data: integer;			END;{----------}{ Open, Close, Read, Write, Init, and Dispose are called by the}{ AppMaker-generated FileM module to do application-specific file accessing.}	FUNCTION OpenAppFile (vRefNum: integer; fName: Str255; VAR fRefNum: integer): boolean;	PROCEDURE CloseAppFile (fRefNum: integer);	PROCEDURE ReadAppFile (fRefNum: integer);	PROCEDURE WriteAppFile (fRefNum: integer);	PROCEDURE InitAppData;	PROCEDURE DisposeAppData;{ These functions are for accessing your data as logical chunks.}{ They are just models for your own accessor functions;}{ they aren't called by any AppMaker-generated code.}{ Replace them with whatever is suitable for your application.}	PROCEDURE AddStuff (stuff: YourStuff);	PROCEDURE DeleteStuff;	FUNCTION GetStuff: boolean;	PROCEDURE PutStuff;{----------}IMPLEMENTATION{ Define additional "private" data structures.}	TYPE		MoreStuff = RECORD				data: integer;			END;{----------}	PROCEDURE AddStuff (stuff: YourStuff);	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {AddStuff}{----------}	FUNCTION GetStuff: boolean;	BEGIN		WITH cur^ DO			BEGIN			END; {with}		GetStuff := false;	END; {GetStuff}{----------}	PROCEDURE PutStuff;	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {PutStuff}{----------}	PROCEDURE DeleteStuff;	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {DeleteStuff}{----------}	PROCEDURE InitAppData;	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {InitAppData}{----------}	PROCEDURE DisposeAppData;	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {DisposeAppData}{----------}	FUNCTION OpenAppFile (vRefNum: integer; fName: Str255; VAR fRefNum: integer): boolean;	BEGIN		OpenAppFile := CheckOS(FSOpen(fName, vRefNum, fRefNum));	END; {OpenAppFile}{----------}	PROCEDURE CloseAppFile (fRefNum: integer);		VAR			okay: boolean;	BEGIN		IF fRefNum <> 0 THEN			BEGIN	{could be 0 if closing new document}				okay := CheckOS(FSClose(fRefNum));			END;	END; {CloseAppFile}{----------}	PROCEDURE ReadAppFile (fRefNum: integer);	BEGIN		InitAppData;		WITH cur^ DO			BEGIN			END; {with}	END; {ReadAppFile}{----------}	PROCEDURE WriteAppFile (fRefNum: integer);	BEGIN		WITH cur^ DO			BEGIN			END; {with}	END; {WriteAppFile}END. {TipsAppMakerPrototypeData}